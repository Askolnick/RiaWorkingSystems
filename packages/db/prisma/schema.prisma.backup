// =============================================================
// Ria Living Systems â€” Unified Prisma Schema (PostgreSQL)
// Multi-tenant; clean relations; generic linking/tagging;
// RBAC, Notifications/Activity; Files; Messaging; Tasks; Library;
// FTS-ready columns (manual SQL indexes below).
///////////////////////////////////////////////////////////////

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- Enums --------------------

enum RoleName {
  super_admin
  admin
  moderator
  member
  guest
  client
}

enum PermissionAction {
  read
  write
  update
  delete
  admin
}

enum LinkKind {
  // Hierarchical relationships
  parent_of
  child_of
  
  // Dependencies
  depends_on
  blocks
  
  // References
  references
  mentioned_in
  attached_to
  
  // Business relationships
  assigned_to
  owned_by
  collaborates_with
  
  // Workflow
  triggers
  completes
  
  // Generic
  relates
  duplicates
}

enum DocKind {
  wiki
  spec
  policy
  howto
  memo
  brief
}

enum DocStatus {
  draft
  review
  scheduled
  published
  archived
}

enum PublishScope {
  private
  users
  groups
  internal
  clients
  public
}

enum TaskStatus {
  todo
  doing
  review
  blocked
  done
  canceled
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum MessageChannelKind {
  email
  chat
  social
  sms
  internal
}

// -------------------- Core Tenancy & Users --------------------

model Tenant {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships      Membership[]
  groups           Group[]
  roles            Role[]
  membershipGroups MembershipGroup[]
  permissionGrants PermissionGrant[]
  taggings         Tagging[]
  entityLinks      EntityLink[]
  fileAssets       FileAsset[]
  attachments      Attachment[]
  messageChannels  MessageChannel[]
  threads          Thread[]
  messages         Message[]
  tasks                 Task[]
  taskComments          TaskComment[]
  taskDependencies      TaskDependency[]
  taskCustomFields      TaskCustomField[]
  taskCustomFieldValues TaskCustomFieldValue[]
  taskSavedViews        TaskSavedView[]
  messageTemplates      MessageTemplate[]
  contacts              Contact[]
  contactInteractions   ContactInteraction[]
  contactLists          ContactList[]
  dashboardLayouts      DashboardLayout[]
  roadmapItems     RoadmapItem[]
  roadmapComments  RoadmapComment[]
  libraryDocs      LibraryDoc[]
  librarySections  LibrarySection[]
  docSectionLinks  DocSectionLink[]
  docPublishes     DocPublish[]
  notifications    Notification[]
  watches          Watch[]
  activityEvents   ActivityEvent[]
  searchIndexes    SearchIndex[]
  wikiSpaces       WikiSpace[]
  wikiPages        WikiPage[]
  wikiRevisions    WikiRevision[]
  wikiLinks        WikiLink[]
  wikiBookmarks    WikiBookmark[]
  
  // Finance
  invoices         Invoice[]
  invoiceItems     InvoiceItem[]
  invoicePayments  InvoicePayment[]
  invoiceActivities InvoiceActivity[]
  invoiceReminders InvoiceReminder[]
  expenseCategories ExpenseCategory[]
  expenses         Expense[]
  expenseAttachments ExpenseAttachment[]
  expenseComments  ExpenseComment[]
  expenseReports   ExpenseReport[]
  expenseReportItems ExpenseReportItem[]
  
  // Products
  productCategories ProductCategory[]
  products         Product[]
  productVariants  ProductVariant[]
  productImages    ProductImage[]
  productPrices    ProductPrice[]
  productReviews   ProductReview[]
  productBundles   ProductBundle[]
  productAttributes ProductAttribute[]
  productAttributeValues ProductAttributeValue[]
  
  // Product Roadmaps
  productRoadmaps  ProductRoadmap[]
  roadmapCategories RoadmapCategory[]
  roadmapReleases  RoadmapRelease[]
  roadmapReleaseNotes RoadmapReleaseNote[]
  roadmapItemComments RoadmapItemComment[]
  roadmapItemVotes RoadmapItemVote[]
  roadmapItemWatchers RoadmapItemWatcher[]
  roadmapItemActivities RoadmapItemActivity[]
  roadmapItemAttachments RoadmapItemAttachment[]
  roadmapContributors RoadmapContributor[]
  roadmapFollowers RoadmapFollower[]
  roadmapCustomFields RoadmapCustomField[]
  roadmapItemCustomValues RoadmapItemCustomValue[]
  
  // Campaign Management
  campaigns         Campaign[]
  campaignMessages  CampaignMessage[]
  campaignAudiences CampaignAudience[]
  campaignAnalytics CampaignAnalytics[]
  campaignEvents    CampaignEvent[]
  campaignAssets    CampaignAsset[]
  campaignAutomations CampaignAutomation[]
  campaignTags      CampaignTag[]
  
  // Feedback System
  feedback          Feedback[]
  feedbackCategories FeedbackCategory[]
  feedbackSubcategories FeedbackSubcategory[]
  feedbackComments  FeedbackComment[]
  feedbackVotes     FeedbackVote[]
  feedbackAttachments FeedbackAttachment[]
  feedbackActivities FeedbackActivity[]
  feedbackFollowers FeedbackFollower[]
  feedbackLinks     FeedbackLink[]
  feedbackCustomFields FeedbackCustomField[]
  feedbackCustomValues FeedbackCustomValue[]
  
  // People Management
  employees         Employee[]
  departments       Department[]
  locations         Location[]
  leaveRequests     LeaveRequest[]
  timeEntries       TimeEntry[]
  performanceReviews PerformanceReview[]
  employeeBenefits  EmployeeBenefit[]
  employeeDocuments EmployeeDocument[]
  employeeSkills    EmployeeSkill[]
  compensationHistory CompensationHistory[]

  // generic helpers
  tags Tag[]
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  email       String   @unique
  password    String   // bcrypt hashed password
  displayName String
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships   Membership[]
  notifications Notification[]  @relation("UserNotifications")
  activities    ActivityEvent[] @relation("UserActivities")
  watches       Watch[]
  createdViews       TaskSavedView[]
  createdTemplates   MessageTemplate[]
  createdContacts    Contact[]         @relation("ContactCreator")
  assignedContacts   Contact[]         @relation("ContactAssignee")
  contactInteractions ContactInteraction[]
  createdContactLists ContactList[]
  
  // Finance
  createdInvoices    Invoice[]         @relation(fields: [id], references: [createdBy])
  createdPayments    InvoicePayment[]  @relation(fields: [id], references: [createdBy])
  createdActivities  InvoiceActivity[] @relation(fields: [id], references: [createdBy])
  createdExpenseCategories ExpenseCategory[] @relation(fields: [id], references: [createdBy])
  createdExpenses    Expense[]         @relation("ExpenseCreator", fields: [id], references: [createdBy])
  submittedExpenses  Expense[]         @relation("ExpenseSubmitter", fields: [id], references: [submittedBy])
  approvedExpenses   Expense[]         @relation("ExpenseApprover", fields: [id], references: [approvedBy])
  expenseAttachments ExpenseAttachment[] @relation(fields: [id], references: [uploadedBy])
  expenseComments    ExpenseComment[]  @relation(fields: [id], references: [createdBy])
  createdExpenseReports ExpenseReport[] @relation("ExpenseReportCreator", fields: [id], references: [createdBy])
  submittedExpenseReports ExpenseReport[] @relation("ExpenseReportSubmitter", fields: [id], references: [submittedBy])
  approvedExpenseReports ExpenseReport[] @relation("ExpenseReportApprover", fields: [id], references: [approvedBy])
  
  // Products
  createdProductCategories ProductCategory[] @relation(fields: [id], references: [createdBy])
  createdProducts    Product[]         @relation(fields: [id], references: [createdBy])
  uploadedProductImages ProductImage[] @relation(fields: [id], references: [uploadedBy])
  productReviews     ProductReview[]   @relation(fields: [id], references: [userId])
  createdProductAttributes ProductAttribute[] @relation(fields: [id], references: [createdBy])
  
  // Product Roadmaps
  createdRoadmaps      ProductRoadmap[]      @relation(fields: [id], references: [createdBy])
  createdRoadmapItems  RoadmapItem[]         @relation(fields: [id], references: [createdBy])
  createdRoadmapCategories RoadmapCategory[] @relation(fields: [id], references: [createdBy])
  createdRoadmapReleases RoadmapRelease[]    @relation(fields: [id], references: [createdBy])
  createdRoadmapReleaseNotes RoadmapReleaseNote[] @relation(fields: [id], references: [createdBy])
  roadmapItemComments  RoadmapItemComment[]  @relation(fields: [id], references: [createdBy])
  roadmapItemVotes     RoadmapItemVote[]     @relation(fields: [id], references: [userId])
  roadmapItemWatchers  RoadmapItemWatcher[]  @relation(fields: [id], references: [userId])
  roadmapItemActivities RoadmapItemActivity[] @relation(fields: [id], references: [createdBy])
  roadmapItemAttachments RoadmapItemAttachment[] @relation(fields: [id], references: [uploadedBy])
  roadmapContributions RoadmapContributor[]  @relation(fields: [id], references: [userId])
  roadmapInvitations   RoadmapContributor[]  @relation("RoadmapInviter", fields: [id], references: [addedBy])
  roadmapFollowings    RoadmapFollower[]     @relation(fields: [id], references: [userId])
  createdRoadmapCustomFields RoadmapCustomField[] @relation(fields: [id], references: [createdBy])
  
  // Campaign Management
  createdCampaigns     Campaign[]            @relation(fields: [id], references: [createdBy])
  createdCampaignAudiences CampaignAudience[] @relation(fields: [id], references: [createdBy])
  uploadedCampaignAssets CampaignAsset[]     @relation(fields: [id], references: [uploadedBy])
  createdCampaignAutomations CampaignAutomation[] @relation(fields: [id], references: [createdBy])
  createdCampaignTags  CampaignTag[]         @relation(fields: [id], references: [createdBy])
  
  // Feedback System
  userFeedback         Feedback[]            @relation("FeedbackUser", fields: [id], references: [userId])
  submittedFeedback    Feedback[]            @relation("FeedbackSubmitter", fields: [id], references: [submittedBy])
  assignedFeedback     Feedback[]            @relation("FeedbackAssignee", fields: [id], references: [assignedTo])
  resolvedFeedback     Feedback[]            @relation("FeedbackResolver", fields: [id], references: [resolvedBy])
  createdFeedbackCategories FeedbackCategory[] @relation(fields: [id], references: [createdBy])
  autoAssignedCategories FeedbackCategory[]  @relation("CategoryAutoAssignee", fields: [id], references: [autoAssignTo])
  createdFeedbackSubcategories FeedbackSubcategory[] @relation(fields: [id], references: [createdBy])
  feedbackComments     FeedbackComment[]     @relation(fields: [id], references: [createdBy])
  feedbackVotes        FeedbackVote[]        @relation(fields: [id], references: [userId])
  feedbackAttachments  FeedbackAttachment[]  @relation(fields: [id], references: [uploadedBy])
  feedbackActivities   FeedbackActivity[]    @relation(fields: [id], references: [createdBy])
  feedbackFollowing    FeedbackFollower[]    @relation(fields: [id], references: [userId])
  createdFeedbackLinks FeedbackLink[]        @relation(fields: [id], references: [createdBy])
  createdFeedbackCustomFields FeedbackCustomField[] @relation(fields: [id], references: [createdBy])
  
  // People Management
  employeeAccount      Employee?             @relation(fields: [id], references: [userId])
  createdEmployees     Employee[]            @relation("EmployeeCreator", fields: [id], references: [createdBy])
  createdDepartments   Department[]          @relation(fields: [id], references: [createdBy])
  createdLocations     Location[]            @relation(fields: [id], references: [createdBy])
  approvedLeaveRequests LeaveRequest[]       @relation(fields: [id], references: [approvedBy])
  approvedTimeEntries  TimeEntry[]           @relation(fields: [id], references: [approvedBy])
  conductedReviews     PerformanceReview[]   @relation(fields: [id], references: [reviewerId])
  enrolledBenefits     EmployeeBenefit[]     @relation(fields: [id], references: [enrolledBy])
  uploadedEmployeeDocuments EmployeeDocument[] @relation(fields: [id], references: [uploadedBy])
  approvedCompensationChanges CompensationHistory[] @relation(fields: [id], references: [approvedBy])

  @@index([email])
}

model Membership {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  userId    String   @db.Uuid
  roleId    String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role?  @relation(fields: [roleId], references: [id])

  groups MembershipGroup[]

  @@unique([tenantId, userId])
  @@index([tenantId])
}

model Group {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  members MembershipGroup[]

  @@unique([tenantId, slug])
  @@index([tenantId, name])
}

model MembershipGroup {
  id           String   @id @default(uuid()) @db.Uuid
  tenantId     String   @db.Uuid
  membershipId String   @db.Uuid
  groupId      String   @db.Uuid
  createdAt    DateTime @default(now())

  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([membershipId, groupId])
  @@index([tenantId, groupId])
}

model Role {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  name      RoleName
  label     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  memberships Membership[]
  grants      PermissionGrant[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

// Resource-oriented permissions (flexible for any module)
model PermissionGrant {
  id        String           @id @default(uuid()) @db.Uuid
  tenantId  String           @db.Uuid
  roleId    String           @db.Uuid
  resource  String // e.g. "task", "doc", "thread", "finance.invoice", "admin.users"
  action    PermissionAction // read|write|update|delete|admin
  condition Json? // optional JSON rule (e.g., {"own": true})
  createdAt DateTime         @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, resource, action])
  @@index([tenantId, resource, action])
}

// -------------------- Tags (generic) --------------------

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  label     String
  color     String? // hex token from theme
  createdAt DateTime @default(now())

  tenant Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  uses   Tagging[]

  @@unique([tenantId, label])
  @@index([tenantId])
}

// Generic tagging for any entity
model Tagging {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  tagId      String   @db.Uuid
  entityType String // "task" | "doc" | "thread" | "file" | etc.
  entityId   String   @db.Uuid
  createdAt  DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tenantId, tagId, entityType, entityId])
  @@index([tenantId, entityType, entityId])
}

// -------------------- Cross-entity Linking --------------------

model EntityLink {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  
  // Source entity
  fromType  String
  fromId    String   @db.Uuid
  
  // Target entity  
  toType    String
  toId      String   @db.Uuid
  
  // Relationship metadata
  kind      LinkKind @default(relates)
  note      String?
  metadata  Json?    // Extensible for future link properties
  
  // Lifecycle management
  active    Boolean  @default(true)  // Soft delete capability
  
  // Audit trail
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Tenant isolation
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Performance indexes
  @@index([tenantId, fromType, fromId, active])
  @@index([tenantId, toType, toId, active])
  @@index([tenantId, kind, active])
  
  // Prevent duplicate links
  @@unique([tenantId, fromType, fromId, toType, toId, kind])
}

// -------------------- Files & Attachments --------------------

model FileAsset {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  bucket     String
  objectKey  String
  mimeType   String
  sizeBytes  Int
  sha256     String?
  uploaderId String?  @db.Uuid
  createdAt  DateTime @default(now())

  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  @@index([tenantId, createdAt])
  @@index([tenantId, objectKey])
}

model Attachment {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  fileId     String   @db.Uuid
  entityType String // "task" | "thread" | "doc" | ...
  entityId   String   @db.Uuid
  createdAt  DateTime @default(now())

  tenant Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  file   FileAsset @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([tenantId, entityType, entityId])
}

// -------------------- Messaging --------------------

model MessageChannel {
  id        String             @id @default(uuid()) @db.Uuid
  tenantId  String             @db.Uuid
  kind      MessageChannelKind
  name      String
  address   String? // inbox email, phone number, handle, etc.
  createdAt DateTime           @default(now())

  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  threads Thread[]

  @@unique([tenantId, kind, address])
  @@index([tenantId, kind])
}

model Thread {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  channelId  String   @db.Uuid
  subject    String?
  status     String   @default("open") // open | snoozed | closed
  priority   String   @default("normal") // normal | high
  assigneeId String?  @db.Uuid
  labels     String[] @db.Text
  lastAt     DateTime @default(now())
  createdAt  DateTime @default(now())

  tenant   Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  channel  MessageChannel @relation(fields: [channelId], references: [id])
  messages Message[]

  @@index([tenantId, lastAt])
  @@index([tenantId, status])
  @@index([tenantId, assigneeId])
  @@index([tenantId], map: "thread_tenant_idx")
}

model Message {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  threadId   String   @db.Uuid
  authorId   String?  @db.Uuid // nullable for external senders
  authorAddr String?
  bodyText   String
  bodyMd     String?
  sentAt     DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([tenantId, threadId, sentAt])
}

// -------------------- Tasks --------------------

model Task {
  id          String       @id @default(uuid()) @db.Uuid
  tenantId    String       @db.Uuid
  number      Int // human-friendly incremental per-tenant (handle in app/tx)
  title       String
  description String?
  status      TaskStatus   @default(todo)
  priority    TaskPriority @default(medium)
  assigneeIds String[]     @db.Text
  labels      String[]     @db.Text
  dueAt       DateTime?
  rank        String?      @db.VarChar(64) // for drag-and-drop ordering within status
  createdBy   String?      @db.Uuid
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?

  tenant       Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  comments     TaskComment[]
  predecessors TaskDependency[]        @relation("TaskSuccessors")
  successors   TaskDependency[]        @relation("TaskPredecessors")
  customFields TaskCustomFieldValue[]

  @@unique([tenantId, number])
  @@index([tenantId, status, priority])
  @@index([tenantId, status, rank])
  @@index([tenantId, updatedAt])
  @@index([tenantId, dueAt])
}

model TaskComment {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  taskId    String   @db.Uuid
  authorId  String?  @db.Uuid
  bodyMd    String
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([tenantId, taskId, createdAt])
}

enum TaskDependencyType {
  FS // Finish-to-Start
  SS // Start-to-Start  
  FF // Finish-to-Finish
  SF // Start-to-Finish
}

model TaskDependency {
  id            String             @id @default(uuid()) @db.Uuid
  tenantId      String             @db.Uuid
  predecessorId String             @db.Uuid // Task that must be completed first
  successorId   String             @db.Uuid // Task that depends on predecessor
  type          TaskDependencyType @default(FS)
  lagMinutes    Int                @default(0) // Delay in minutes
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  tenant        Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  predecessor   Task   @relation("TaskPredecessors", fields: [predecessorId], references: [id], onDelete: Cascade)
  successor     Task   @relation("TaskSuccessors", fields: [successorId], references: [id], onDelete: Cascade)
  
  @@unique([predecessorId, successorId]) // Prevent duplicate dependencies
  @@index([tenantId, predecessorId])
  @@index([tenantId, successorId])
}

// -------------------- Task Custom Fields --------------------

enum CustomFieldType {
  text
  number
  boolean
  date
  select
  multiselect
  user
  url
}

model TaskCustomField {
  id            String          @id @default(uuid()) @db.Uuid
  tenantId      String          @db.Uuid
  name          String          // Display name
  key           String          // Unique key for API access
  description   String?
  type          CustomFieldType
  required      Boolean         @default(false)
  defaultValue  String?         // JSON string for default value
  options       String?         // JSON array for select/multiselect options
  validation    String?         // JSON object for validation rules
  isActive      Boolean         @default(true)
  sortOrder     Int             @default(0)
  createdBy     String?         @db.Uuid
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  tenant Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  values TaskCustomFieldValue[]
  
  @@unique([tenantId, key]) // Unique key per tenant
  @@index([tenantId, isActive, sortOrder])
}

model TaskCustomFieldValue {
  id               String          @id @default(uuid()) @db.Uuid
  tenantId         String          @db.Uuid
  taskId           String          @db.Uuid
  customFieldId    String          @db.Uuid
  value            String?         // JSON string for the actual value
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  task        Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  customField TaskCustomField  @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  
  @@unique([taskId, customFieldId]) // One value per field per task
  @@index([tenantId, taskId])
  @@index([tenantId, customFieldId])
}

model TaskSavedView {
  id          String   @id @default(uuid()) @db.Uuid
  tenantId    String   @db.Uuid
  name        String
  description String?
  viewType    String   // 'list' | 'board' | 'calendar' | 'timeline'
  filters     String   // JSON string for TaskFilter
  sorting     String   // JSON string for TaskSort[]
  groupBy     String?
  columns     String?  // JSON string for column configuration
  isDefault   Boolean  @default(false)
  isShared    Boolean  @default(false)
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tenant  Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, name]) // Unique view names per tenant
  @@index([tenantId, createdBy])
  @@index([tenantId, isDefault])
  @@index([tenantId, isShared])
}

// -------------------- Roadmap --------------------


model RoadmapComment {
  id           String      @id @default(uuid()) @db.Uuid
  tenantId     String      @db.Uuid
  roadmapItemId String     @db.Uuid
  authorId     String?     @db.Uuid
  body         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmapItem RoadmapItem @relation(fields: [roadmapItemId], references: [id], onDelete: Cascade)
  
  @@index([tenantId, roadmapItemId, createdAt])
}

// -------------------- Library (Wiki/Docs) --------------------

model LibraryDoc {
  id        String    @id @default(uuid()) @db.Uuid
  tenantId  String    @db.Uuid
  title     String
  slug      String?
  kind      DocKind   @default(wiki)
  status    DocStatus @default(draft)
  ownerId   String?   @db.Uuid
  tags      String[]  @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  bodyMd     String?
  bodyTypist Json?

  sections  DocSectionLink[]
  publishes DocPublish[]

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, slug])
  @@index([tenantId, status])
  @@index([tenantId, kind])
  @@index([tenantId, updatedAt])
  @@map("library_docs")
}

model LibrarySection {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  name       String
  bodyMd     String?
  bodyTypist Json?
  version    Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  usedBy DocSectionLink[]
  tenant Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name, version])
  @@index([tenantId, name])
  @@map("library_sections")
}

model DocSectionLink {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  docId     String   @db.Uuid
  sectionId String   @db.Uuid
  position  Int      @default(0)
  params    Json?
  createdAt DateTime @default(now())

  doc     LibraryDoc     @relation(fields: [docId], references: [id], onDelete: Cascade)
  section LibrarySection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  tenant  Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, docId, position])
  @@map("doc_section_links")
}

model DocPublish {
  id        String       @id @default(uuid()) @db.Uuid
  tenantId  String       @db.Uuid
  docId     String       @db.Uuid
  scope     PublishScope
  userIds   String[]     @db.Text
  groupIds  String[]     @db.Text
  urlPath   String?
  createdAt DateTime     @default(now())

  doc    LibraryDoc @relation(fields: [docId], references: [id], onDelete: Cascade)
  tenant Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, scope])
  @@map("doc_publishes")
}

// -------------------- Notifications & Activity --------------------

model Notification {
  id         String    @id @default(uuid()) @db.Uuid
  tenantId   String    @db.Uuid
  userId     String    @db.Uuid
  entityType String
  entityId   String    @db.Uuid
  kind       String // "assigned","mentioned","linked","status_changed",...
  payload    Json?
  readAt     DateTime?
  createdAt  DateTime  @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, userId, createdAt])
  @@index([tenantId, entityType, entityId])
}

model Watch {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  userId     String   @db.Uuid
  entityType String
  entityId   String   @db.Uuid
  createdAt  DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId, entityType, entityId])
  @@index([tenantId, entityType, entityId])
}

model ActivityEvent {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  actorId    String?  @db.Uuid
  entityType String
  entityId   String   @db.Uuid
  action     String // "create","update","link","comment","publish"...
  meta       Json?
  createdAt  DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  actor  User?  @relation("UserActivities", fields: [actorId], references: [id])

  @@index([tenantId, entityType, entityId, createdAt])
}

// -------------------- Search (FTS-ready) --------------------
// NOTE: Prisma does not natively support tsvector columns; you can add them
// via SQL migrations. Optionally create a separate SearchIndex table or
// use generated columns on key entities. Provided here is a generic index
// table pattern.

model SearchIndex {
  id         String   @id @default(uuid()) @db.Uuid
  tenantId   String   @db.Uuid
  entityType String // "task","doc","thread"
  entityId   String   @db.Uuid
  // denormalized text used for search previews
  title      String?
  snippet    String?
  // raw text blob to index (app or trigger maintains)
  content    String
  // When using FTS, create a tsvector column via SQL and a GIN index
  // searchVec Unsupported("tsvector")?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, entityType, entityId])
  @@index([tenantId, updatedAt])
}

// -------------------- Portal Dashboards --------------------

model DashboardLayout {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  userId    String?  @db.Uuid  // null = org default, non-null = personal
  name      String   @default("default")
  widgets   Json     @default("[]") // WidgetInstance[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId, name])
  @@index([tenantId, userId])
}

// -------------------- Message Templates --------------------

model MessageTemplate {
  id           String   @id @default(uuid()) @db.Uuid
  tenantId     String   @db.Uuid
  name         String
  subject      String
  content      String   @db.Text
  templateType String   // 'email' | 'sms' | 'push' | 'in-app'
  variables    String   @db.Text // JSON string for TemplateVariable[]
  category     String?
  tags         String   @db.Text // JSON string for tags array
  isActive     Boolean  @default(true)
  createdBy    String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant  Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("message_templates")
  @@index([tenantId])
  @@index([templateType])
  @@index([category])
  @@index([isActive])
}

// -------------------- Contacts Management --------------------

model Contact {
  id                 String   @id @default(uuid()) @db.Uuid
  tenantId           String   @db.Uuid
  firstName          String
  lastName           String
  email              String?
  phone              String?
  company            String?
  jobTitle           String?
  contactType        String   @default("lead") // 'lead' | 'client' | 'prospect' | 'partner' | 'vendor' | 'other'
  status             String   @default("active") // 'active' | 'inactive' | 'do-not-contact' | 'qualified' | 'converted'
  source             String?
  tags               String   @db.Text // JSON string for tags array
  addresses          String   @db.Text @default("[]") // JSON string for ContactAddress[]
  socialProfiles     String   @db.Text @default("[]") // JSON string for SocialProfile[]
  customFields       String   @db.Text @default("{}") // JSON string for custom fields
  notes              String?  @db.Text
  assignedTo         String?  @db.Uuid
  lastContactDate    DateTime?
  nextFollowUpDate   DateTime?
  leadScore          Int?
  createdBy          String   @db.Uuid
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  tenant      Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User                  @relation(fields: [createdBy], references: [id], onDelete: Cascade, name: "ContactCreator")
  assignee    User?                 @relation(fields: [assignedTo], references: [id], onDelete: SetNull, name: "ContactAssignee")
  interactions ContactInteraction[]
  listMemberships ContactListMembership[]

  @@map("contacts")
  @@index([tenantId])
  @@index([contactType])
  @@index([status])
  @@index([assignedTo])
  @@index([company])
  @@index([email])
  @@index([phone])
  @@index([createdAt])
  @@index([lastContactDate])
  @@index([nextFollowUpDate])
}

model ContactInteraction {
  id            String    @id @default(uuid()) @db.Uuid
  contactId     String    @db.Uuid
  tenantId      String    @db.Uuid
  type          String    // 'call' | 'email' | 'meeting' | 'note' | 'task' | 'proposal' | 'contract' | 'other'
  subject       String
  description   String?   @db.Text
  outcome       String?   @db.Text
  nextAction    String?   @db.Text
  scheduledDate DateTime?
  completedDate DateTime?
  createdBy     String    @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("contact_interactions")
  @@index([contactId])
  @@index([tenantId])
  @@index([type])
  @@index([scheduledDate])
  @@index([completedDate])
  @@index([createdAt])
}

model ContactList {
  id           String   @id @default(uuid()) @db.Uuid
  tenantId     String   @db.Uuid
  name         String
  description  String?  @db.Text
  isStatic     Boolean  @default(true)
  criteria     String?  @db.Text // JSON string for ContactListCriteria
  contactCount Int      @default(0)
  createdBy    String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant      Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User                    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  memberships ContactListMembership[]

  @@map("contact_lists")
  @@index([tenantId])
  @@index([isStatic])
  @@index([createdBy])
}

model ContactListMembership {
  id            String   @id @default(uuid()) @db.Uuid
  contactListId String   @db.Uuid
  contactId     String   @db.Uuid
  addedAt       DateTime @default(now())

  contactList ContactList @relation(fields: [contactListId], references: [id], onDelete: Cascade)
  contact     Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([contactListId, contactId])
  @@map("contact_list_memberships")
  @@index([contactListId])
  @@index([contactId])
}

// -------------------- Wiki/Knowledge Base --------------------

model WikiSpace {
  id          String   @id @default(uuid()) @db.Uuid
  tenantId    String   @db.Uuid
  name        String
  description String?
  slug        String   // URL-friendly identifier
  isPublic    Boolean  @default(false)
  icon        String?  // Icon identifier or emoji
  color       String?  // Color theme
  sortOrder   Int      @default(0)
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  pages  WikiPage[]

  @@unique([tenantId, slug])
  @@map("wiki_spaces")
  @@index([tenantId, isPublic])
  @@index([createdBy])
}

model WikiPage {
  id          String        @id @default(uuid()) @db.Uuid
  tenantId    String        @db.Uuid
  spaceId     String        @db.Uuid
  parentId    String?       @db.Uuid // For nested pages
  title       String
  slug        String        // URL-friendly identifier
  content     String?       @db.Text // Rich text content
  excerpt     String?       // Brief summary
  status      WikiPageStatus @default(draft)
  isTemplate  Boolean       @default(false)
  templateId  String?       @db.Uuid // If created from template
  tags        String[]      // Array of tags
  version     Int           @default(1) // Version number
  publishedAt DateTime?
  createdBy   String        @db.Uuid
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  tenant   Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  space    WikiSpace     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  parent   WikiPage?     @relation("WikiPageHierarchy", fields: [parentId], references: [id])
  children WikiPage[]    @relation("WikiPageHierarchy")
  template WikiPage?     @relation("WikiPageTemplate", fields: [templateId], references: [id])
  instances WikiPage[]   @relation("WikiPageTemplate")
  revisions WikiRevision[]
  links    WikiLink[]    @relation("WikiPageLinks")
  backlinks WikiLink[]   @relation("WikiPageBacklinks")

  @@unique([tenantId, spaceId, slug])
  @@map("wiki_pages")
  @@index([tenantId, spaceId, status])
  @@index([parentId])
  @@index([createdBy])
  @@index([publishedAt])
}

enum WikiPageStatus {
  draft
  published
  archived
}

model WikiRevision {
  id          String   @id @default(uuid()) @db.Uuid
  tenantId    String   @db.Uuid
  pageId      String   @db.Uuid
  version     Int      // Version number
  title       String
  content     String   @db.Text
  excerpt     String?
  changeNote  String?  // What changed in this revision
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())

  tenant Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  page   WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, version])
  @@map("wiki_revisions")
  @@index([tenantId, pageId])
  @@index([createdBy])
  @@index([createdAt])
}

model WikiLink {
  id           String   @id @default(uuid()) @db.Uuid
  tenantId     String   @db.Uuid
  fromPageId   String   @db.Uuid
  toPageId     String   @db.Uuid
  linkText     String?  // The text that was linked
  linkType     WikiLinkType @default(internal)
  createdAt    DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  fromPage WikiPage @relation("WikiPageLinks", fields: [fromPageId], references: [id], onDelete: Cascade)
  toPage   WikiPage @relation("WikiPageBacklinks", fields: [toPageId], references: [id], onDelete: Cascade)

  @@unique([fromPageId, toPageId])
  @@map("wiki_links")
  @@index([tenantId, fromPageId])
  @@index([tenantId, toPageId])
}

enum WikiLinkType {
  internal
  mention
  reference
}

model WikiBookmark {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  userId    String   @db.Uuid
  pageId    String   @db.Uuid
  createdAt DateTime @default(now())

  tenant Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  page   WikiPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([userId, pageId])
  @@map("wiki_bookmarks")
  @@index([tenantId, userId])
}

// -------------------- Finance Invoices --------------------

enum InvoiceStatus {
  draft
  sent
  viewed
  partial
  paid
  overdue
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  cancelled
  refunded
}

enum PaymentMethod {
  bank_transfer
  credit_card
  debit_card
  paypal
  stripe
  cash
  check
  other
}

model Invoice {
  id                String        @id @default(uuid()) @db.Uuid
  tenantId          String        @db.Uuid
  number            String        // Auto-generated invoice number
  clientId          String?       @db.Uuid // Optional - can be one-off invoice
  clientName        String        // Cached client name
  clientEmail       String?       // Cached client email
  clientAddress     Json?         // Billing address
  
  // Invoice Details
  issueDate         DateTime      @default(now())
  dueDate           DateTime
  status            InvoiceStatus @default(draft)
  
  // Financial
  subtotal          Decimal       @db.Decimal(10, 2)
  taxRate           Decimal       @default(0) @db.Decimal(5, 2)
  taxAmount         Decimal       @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal       @default(0) @db.Decimal(10, 2)
  total             Decimal       @db.Decimal(10, 2)
  paidAmount        Decimal       @default(0) @db.Decimal(10, 2)
  balanceDue        Decimal       @db.Decimal(10, 2) // total - paidAmount
  
  // Currency
  currency          String        @default("USD") @db.VarChar(3)
  
  // Content
  description       String?       @db.Text
  notes             String?       @db.Text
  terms             String?       @db.Text
  footer            String?       @db.Text
  
  // Settings
  sendReminders     Boolean       @default(true)
  allowPartialPay   Boolean       @default(true)
  requireSignature  Boolean       @default(false)
  
  // Metadata
  createdBy         String        @db.Uuid
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  sentAt            DateTime?
  viewedAt          DateTime?
  paidAt            DateTime?

  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  items       InvoiceItem[]
  payments    InvoicePayment[]
  activities  InvoiceActivity[]
  reminders   InvoiceReminder[]

  @@unique([tenantId, number])
  @@index([tenantId, status])
  @@index([tenantId, dueDate])
  @@index([tenantId, clientId])
  @@index([tenantId, createdAt])
  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  invoiceId   String  @db.Uuid
  
  name        String  // Service/product name
  description String? @db.Text
  quantity    Decimal @default(1) @db.Decimal(10, 2)
  rate        Decimal @db.Decimal(10, 2) // Price per unit
  amount      Decimal @db.Decimal(10, 2) // quantity * rate
  
  // Optional categorization
  category    String?
  
  // Ordering
  sortOrder   Int     @default(0)

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([tenantId, invoiceId])
  @@map("invoice_items")
}

model InvoicePayment {
  id              String        @id @default(uuid()) @db.Uuid
  tenantId        String        @db.Uuid
  invoiceId       String        @db.Uuid
  
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  status          PaymentStatus @default(pending)
  
  // Payment details
  reference       String?       // External reference/transaction ID
  notes           String?       @db.Text
  
  // Dates
  paymentDate     DateTime      @default(now())
  processedAt     DateTime?
  
  // Metadata
  createdBy       String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  creator User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([tenantId, invoiceId])
  @@index([tenantId, status])
  @@index([tenantId, paymentDate])
  @@map("invoice_payments")
}

enum InvoiceActivityType {
  created
  sent
  viewed
  payment_received
  payment_failed
  reminded
  cancelled
  refunded
  updated
  note_added
}

model InvoiceActivity {
  id          String              @id @default(uuid()) @db.Uuid
  tenantId    String              @db.Uuid
  invoiceId   String              @db.Uuid
  
  type        InvoiceActivityType
  description String              @db.Text
  metadata    Json?               // Additional structured data
  
  createdBy   String?             @db.Uuid // Can be system-generated
  createdAt   DateTime            @default(now())

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  creator User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  @@index([tenantId, invoiceId, createdAt])
  @@map("invoice_activities")
}

enum ReminderType {
  before_due
  on_due_date
  after_due
  custom
}

model InvoiceReminder {
  id          String       @id @default(uuid()) @db.Uuid
  tenantId    String       @db.Uuid
  invoiceId   String       @db.Uuid
  
  type        ReminderType
  daysOffset  Int          // Days before/after due date (negative for before)
  subject     String
  message     String       @db.Text
  
  // Status
  sent        Boolean      @default(false)
  sentAt      DateTime?
  
  // Scheduling
  scheduledAt DateTime
  createdAt   DateTime     @default(now())

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([tenantId, invoiceId])
  @@index([tenantId, scheduledAt, sent])
  @@map("invoice_reminders")
}

// -------------------- Finance Expenses --------------------

enum ExpenseStatus {
  draft
  pending
  approved
  rejected
  reimbursed
  paid
}

enum ExpenseType {
  travel
  meals
  accommodation
  transportation
  office_supplies
  software
  equipment
  marketing
  utilities
  professional_services
  training
  other
}

model ExpenseCategory {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  name        String
  description String? @db.Text
  isActive    Boolean @default(true)
  
  // Budget settings
  monthlyBudget Decimal? @db.Decimal(10, 2)
  yearlyBudget  Decimal? @db.Decimal(10, 2)
  
  // Approval settings
  requiresApproval     Boolean @default(true)
  approvalThreshold    Decimal @default(0) @db.Decimal(10, 2)
  defaultApprover      String? @db.Uuid
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator  User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("expense_categories")
}

model Expense {
  id          String        @id @default(uuid()) @db.Uuid
  tenantId    String        @db.Uuid
  number      String        // Auto-generated expense number
  
  // Basic Info
  title       String
  description String?       @db.Text
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD") @db.VarChar(3)
  
  // Classification
  categoryId  String?       @db.Uuid
  type        ExpenseType
  status      ExpenseStatus @default(draft)
  
  // Dates
  expenseDate DateTime      // When the expense occurred
  submittedAt DateTime?     // When submitted for approval
  approvedAt  DateTime?     // When approved
  rejectedAt  DateTime?     // When rejected
  paidAt      DateTime?     // When reimbursed/paid
  
  // Tax & Reimbursement
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  reimbursable   Boolean @default(true)
  reimbursedAmount Decimal @default(0) @db.Decimal(10, 2)
  
  // Approval workflow
  submittedBy    String?  @db.Uuid // Employee who submitted
  approvedBy     String?  @db.Uuid // Manager who approved
  rejectionReason String? @db.Text
  
  // Receipt & Documentation
  receiptUrl     String?  @db.Text
  receiptNumber  String?
  vendor         String?
  paymentMethod  String?  // cash, card, bank_transfer, etc.
  
  // Project/Client association
  projectId      String?  @db.Uuid
  clientId       String?  @db.Uuid
  
  // Metadata
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User             @relation("ExpenseCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  submitter   User?            @relation("ExpenseSubmitter", fields: [submittedBy], references: [id], onDelete: SetNull)
  approver    User?            @relation("ExpenseApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  category    ExpenseCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  attachments ExpenseAttachment[]
  comments    ExpenseComment[]
  reportItems ExpenseReportItem[]

  @@unique([tenantId, number])
  @@index([tenantId, status])
  @@index([tenantId, submittedBy])
  @@index([tenantId, approvedBy])
  @@index([tenantId, expenseDate])
  @@index([tenantId, categoryId])
  @@map("expenses")
}

model ExpenseAttachment {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  expenseId String @db.Uuid
  
  filename    String
  originalName String
  fileSize    Int
  mimeType    String
  url         String @db.Text
  
  // Metadata
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())

  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  expense  Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  uploader User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, expenseId])
  @@map("expense_attachments")
}

model ExpenseComment {
  id        String   @id @default(uuid()) @db.Uuid
  tenantId  String   @db.Uuid
  expenseId String   @db.Uuid
  
  content   String   @db.Text
  isPrivate Boolean  @default(false) // Only visible to approvers
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  author  User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([tenantId, expenseId, createdAt])
  @@map("expense_comments")
}

model ExpenseReport {
  id          String        @id @default(uuid()) @db.Uuid
  tenantId    String        @db.Uuid
  
  title       String
  description String?       @db.Text
  status      ExpenseStatus @default(draft)
  
  // Date range
  fromDate DateTime
  toDate   DateTime
  
  // Financial summary
  totalAmount      Decimal @db.Decimal(10, 2)
  reimbursableAmount Decimal @db.Decimal(10, 2)
  taxAmount        Decimal @db.Decimal(10, 2)
  
  // Workflow
  submittedBy String?  @db.Uuid
  submittedAt DateTime?
  approvedBy  String?  @db.Uuid
  approvedAt  DateTime?
  paidAt      DateTime?
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant      Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User                   @relation("ExpenseReportCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  submitter   User?                  @relation("ExpenseReportSubmitter", fields: [submittedBy], references: [id], onDelete: SetNull)
  approver    User?                  @relation("ExpenseReportApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  expenseItems ExpenseReportItem[]

  @@index([tenantId, status])
  @@index([tenantId, submittedBy])
  @@index([tenantId, approvedBy])
  @@map("expense_reports")
}

model ExpenseReportItem {
  id       String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid
  reportId String @db.Uuid
  expenseId String @db.Uuid
  
  amount   Decimal @db.Decimal(10, 2)
  
  addedAt DateTime @default(now())

  tenant  Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  report  ExpenseReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  expense Expense       @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([reportId, expenseId])
  @@index([tenantId, reportId])
  @@map("expense_report_items")
}

// -------------------- Product Catalog --------------------

enum ProductStatus {
  draft
  active
  inactive
  discontinued
  out_of_stock
}

enum ProductType {
  physical
  digital
  service
  subscription
  bundle
}

enum PricingModel {
  one_time
  recurring
  usage_based
  tiered
  freemium
}

model ProductCategory {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  name        String
  description String? @db.Text
  slug        String  // URL-friendly identifier
  
  // Hierarchy
  parentId    String? @db.Uuid
  sortOrder   Int     @default(0)
  
  // SEO & Marketing
  metaTitle       String?
  metaDescription String? @db.Text
  imageUrl        String? @db.Text
  
  // Status
  isActive    Boolean @default(true)
  isVisible   Boolean @default(true)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator  User              @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent   ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children ProductCategory[] @relation("CategoryHierarchy")
  products Product[]

  @@unique([tenantId, slug])
  @@index([tenantId, parentId])
  @@index([tenantId, isActive, isVisible])
  @@map("product_categories")
}

model Product {
  id        String        @id @default(uuid()) @db.Uuid
  tenantId  String        @db.Uuid
  name      String
  description String?     @db.Text
  shortDescription String? @db.Text
  slug      String        // URL-friendly identifier
  sku       String?       // Stock Keeping Unit
  
  // Classification
  categoryId String?      @db.Uuid
  type       ProductType  @default(physical)
  status     ProductStatus @default(draft)
  
  // Pricing
  basePrice     Decimal      @db.Decimal(10, 2)
  salePrice     Decimal?     @db.Decimal(10, 2)
  currency      String       @default("USD") @db.VarChar(3)
  pricingModel  PricingModel @default(one_time)
  
  // Inventory (for physical products)
  trackInventory Boolean @default(false)
  stockQuantity  Int     @default(0)
  lowStockThreshold Int  @default(5)
  
  // Dimensions & Shipping
  weight   Decimal? @db.Decimal(8, 2)
  length   Decimal? @db.Decimal(8, 2)
  width    Decimal? @db.Decimal(8, 2)
  height   Decimal? @db.Decimal(8, 2)
  shippingRequired Boolean @default(true)
  
  // SEO & Marketing
  metaTitle       String?
  metaDescription String? @db.Text
  tags            String[] @db.Text
  
  // Features & Specs
  features        Json?    // Structured feature data
  specifications  Json?    // Technical specifications
  
  // Visibility & Sales
  isVisible       Boolean @default(true)
  isFeatured      Boolean @default(false)
  salesCount      Int     @default(0)
  viewCount       Int     @default(0)
  
  // Dates
  publishedAt     DateTime?
  discontinuedAt  DateTime?
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator   User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  category  ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  variants  ProductVariant[]
  images    ProductImage[]
  prices    ProductPrice[]
  reviews   ProductReview[]
  bundles   ProductBundle[]  @relation("BundleProducts")
  bundleItems ProductBundle[] @relation("BundleItems")
  attributeValues ProductAttributeValue[]

  @@unique([tenantId, slug])
  @@unique([tenantId, sku])
  @@index([tenantId, status, isVisible])
  @@index([tenantId, categoryId])
  @@index([tenantId, type])
  @@index([tenantId, publishedAt])
  @@map("products")
}

model ProductVariant {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  productId String @db.Uuid
  
  name      String
  sku       String? // Variant-specific SKU
  
  // Pricing override
  price     Decimal? @db.Decimal(10, 2)
  salePrice Decimal? @db.Decimal(10, 2)
  
  // Inventory override
  stockQuantity Int? 
  
  // Variant attributes (e.g., size, color, material)
  attributes Json
  
  // Status
  isActive  Boolean @default(true)
  sortOrder Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  images  ProductImage[]

  @@unique([tenantId, productId, sku])
  @@index([tenantId, productId])
  @@map("product_variants")
}

model ProductImage {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  productId String @db.Uuid
  variantId String? @db.Uuid // Optional: variant-specific image
  
  url       String  @db.Text
  alt       String?
  filename  String
  fileSize  Int
  mimeType  String
  
  // Image properties
  width     Int?
  height    Int?
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)
  
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())

  tenant   Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product  Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant  ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  uploader User            @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, productId])
  @@index([tenantId, variantId])
  @@map("product_images")
}

model ProductPrice {
  id        String       @id @default(uuid()) @db.Uuid
  tenantId  String       @db.Uuid
  productId String       @db.Uuid
  
  // Price details
  price        Decimal @db.Decimal(10, 2)
  currency     String  @db.VarChar(3)
  pricingModel PricingModel
  
  // Tiered/Usage pricing
  minQuantity  Int?    // For tiered pricing
  maxQuantity  Int?    // For tiered pricing
  unitType     String? // For usage-based (e.g., "per user", "per GB")
  
  // Subscription pricing
  billingCycle String? // "monthly", "yearly", "weekly"
  trialDays    Int?    // Free trial period
  
  // Validity
  validFrom DateTime?
  validTo   DateTime?
  isActive  Boolean   @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([tenantId, productId])
  @@index([tenantId, isActive, validFrom, validTo])
  @@map("product_prices")
}

model ProductReview {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  productId String @db.Uuid
  
  // Review details
  rating    Int     // 1-5 stars
  title     String?
  content   String? @db.Text
  
  // Reviewer
  reviewerName  String?
  reviewerEmail String?
  userId        String? @db.Uuid // If authenticated user
  
  // Status
  isApproved    Boolean @default(false)
  isVerified    Boolean @default(false) // Verified purchase
  isFeatured    Boolean @default(false)
  
  // Helpfulness
  helpfulCount    Int @default(0)
  notHelpfulCount Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviewer User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tenantId, productId])
  @@index([tenantId, isApproved, rating])
  @@map("product_reviews")
}

model ProductBundle {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  bundleId  String @db.Uuid // The bundle product
  productId String @db.Uuid // Product included in bundle
  
  quantity    Int     @default(1)
  discount    Decimal @default(0) @db.Decimal(5, 2) // Percentage discount
  isOptional  Boolean @default(false)
  sortOrder   Int     @default(0)
  
  createdAt DateTime @default(now())

  tenant       Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  bundleProduct Product @relation("BundleProducts", fields: [bundleId], references: [id], onDelete: Cascade)
  includedProduct Product @relation("BundleItems", fields: [productId], references: [id], onDelete: Cascade)

  @@unique([bundleId, productId])
  @@index([tenantId, bundleId])
  @@map("product_bundles")
}

model ProductAttribute {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  name      String
  type      String // "text", "number", "boolean", "select", "multiselect", "color", "date"
  
  // Configuration
  isRequired   Boolean @default(false)
  isFilterable Boolean @default(false)
  isVariant    Boolean @default(false) // Used for product variants
  
  // Select options (for select/multiselect types)
  options   Json?
  
  // Display
  label       String?
  placeholder String?
  helpText    String?
  sortOrder   Int     @default(0)
  
  isActive Boolean @default(true)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  values  ProductAttributeValue[]

  @@unique([tenantId, name])
  @@index([tenantId, type, isActive])
  @@map("product_attributes")
}

model ProductAttributeValue {
  id          String @id @default(uuid()) @db.Uuid
  tenantId    String @db.Uuid
  productId   String @db.Uuid
  attributeId String @db.Uuid
  
  value       String @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([productId, attributeId])
  @@index([tenantId, productId])
  @@index([tenantId, attributeId])
  @@map("product_attribute_values")
}

// -------------------- Product Roadmaps --------------------

enum RoadmapStatus {
  planning
  active
  paused
  completed
  cancelled
  archived
}

enum RoadmapVisibility {
  public     // Visible to everyone
  internal   // Visible to team members only
  private    // Visible to owner and selected users only
}

enum ItemStatus {
  idea
  planned
  in_progress
  in_review
  completed
  cancelled
  on_hold
}

enum ItemType {
  feature
  enhancement
  bug_fix
  research
  integration
  infrastructure
  maintenance
  epic
}

enum ItemPriority {
  low
  medium
  high
  critical
  urgent
}

model ProductRoadmap {
  id          String            @id @default(uuid()) @db.Uuid
  tenantId    String            @db.Uuid
  name        String
  description String?           @db.Text
  
  // Status & Visibility
  status      RoadmapStatus     @default(planning)
  visibility  RoadmapVisibility @default(internal)
  
  // Timeline
  startDate   DateTime?
  endDate     DateTime?
  
  // Configuration
  color       String?           @db.VarChar(7) // Hex color code
  icon        String?
  
  // Settings
  allowVoting     Boolean @default(false)
  allowComments   Boolean @default(true)
  requireApproval Boolean @default(false)
  
  // Auto-generated fields
  slug        String
  itemCount   Int     @default(0)
  
  // Metadata
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator     User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  items       RoadmapItem[]
  contributors RoadmapContributor[]
  followers   RoadmapFollower[]
  releases    RoadmapRelease[]
  categories  RoadmapCategory[]
  customFields RoadmapCustomField[]

  @@unique([tenantId, slug])
  @@index([tenantId, status])
  @@index([tenantId, visibility])
  @@index([tenantId, createdAt])
  @@map("product_roadmaps")
}

model RoadmapItem {
  id          String       @id @default(uuid()) @db.Uuid
  tenantId    String       @db.Uuid
  roadmapId   String       @db.Uuid
  parentId    String?      @db.Uuid // For sub-items/tasks
  
  // Basic Info
  title       String
  description String?      @db.Text
  type        ItemType     @default(feature)
  status      ItemStatus   @default(idea)
  priority    ItemPriority @default(medium)
  
  // Timeline & Effort
  startDate   DateTime?
  targetDate  DateTime?
  completedAt DateTime?
  estimatedEffort String?   // e.g., "2 weeks", "3 story points"
  actualEffort    String?
  
  // Progress
  progressPercentage Int @default(0)
  
  // Categorization
  categoryId  String?      @db.Uuid
  releaseId   String?      @db.Uuid
  tags        String[]     @db.Text
  
  // External Links
  externalUrl String?      @db.Text
  githubIssue String?      // GitHub issue number or URL
  jiraTicket  String?      // Jira ticket key
  figmaLink   String?      @db.Text
  
  // Engagement
  upvotes     Int          @default(0)
  downvotes   Int          @default(0)
  viewCount   Int          @default(0)
  
  // Settings
  allowVoting   Boolean @default(true)
  allowComments Boolean @default(true)
  isPublic      Boolean @default(true)
  
  // Auto-generated
  slug        String
  sortOrder   Int     @default(0)
  
  // Metadata
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmap     ProductRoadmap   @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  creator     User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent      RoadmapItem?     @relation("ItemHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    RoadmapItem[]    @relation("ItemHierarchy")
  category    RoadmapCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  release     RoadmapRelease?  @relation(fields: [releaseId], references: [id], onDelete: SetNull)
  
  comments    RoadmapItemComment[]
  votes       RoadmapItemVote[]
  watchers    RoadmapItemWatcher[]
  activities  RoadmapItemActivity[]
  attachments RoadmapItemAttachment[]
  customValues RoadmapItemCustomValue[]

  @@unique([tenantId, roadmapId, slug])
  @@index([tenantId, roadmapId, status])
  @@index([tenantId, roadmapId, type])
  @@index([tenantId, roadmapId, priority])
  @@index([tenantId, categoryId])
  @@index([tenantId, releaseId])
  @@index([tenantId, createdAt])
  @@map("roadmap_items")
}

model RoadmapCategory {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  roadmapId   String  @db.Uuid
  
  name        String
  description String? @db.Text
  color       String? @db.VarChar(7)
  icon        String?
  sortOrder   Int     @default(0)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmap  ProductRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  creator  User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  items    RoadmapItem[]

  @@unique([tenantId, roadmapId, name])
  @@index([tenantId, roadmapId])
  @@map("roadmap_categories")
}

model RoadmapRelease {
  id          String    @id @default(uuid()) @db.Uuid
  tenantId    String    @db.Uuid
  roadmapId   String    @db.Uuid
  
  name        String
  description String?   @db.Text
  version     String?   // e.g., "v2.1.0"
  
  // Timeline
  startDate   DateTime?
  targetDate  DateTime?
  releaseDate DateTime?
  
  // Status
  isReleased  Boolean @default(false)
  
  // Auto-generated
  slug        String
  itemCount   Int     @default(0)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmap  ProductRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  creator  User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  items    RoadmapItem[]
  notes    RoadmapReleaseNote[]

  @@unique([tenantId, roadmapId, slug])
  @@unique([tenantId, roadmapId, version])
  @@index([tenantId, roadmapId])
  @@index([tenantId, isReleased])
  @@map("roadmap_releases")
}

model RoadmapReleaseNote {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  releaseId String @db.Uuid
  
  title     String
  content   String @db.Text
  type      String @default("feature") // feature, improvement, bugfix, breaking
  sortOrder Int    @default(0)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant  Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  release RoadmapRelease @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  creator User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([tenantId, releaseId])
  @@map("roadmap_release_notes")
}

model RoadmapItemComment {
  id       String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid
  itemId   String @db.Uuid
  parentId String? @db.Uuid // For nested comments
  
  content  String @db.Text
  isPrivate Boolean @default(false)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item     RoadmapItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  creator  User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent   RoadmapItemComment? @relation("CommentHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children RoadmapItemComment[] @relation("CommentHierarchy")

  @@index([tenantId, itemId])
  @@index([tenantId, createdAt])
  @@map("roadmap_item_comments")
}

model RoadmapItemVote {
  id       String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid
  itemId   String @db.Uuid
  userId   String @db.Uuid
  
  isUpvote Boolean // true for upvote, false for downvote
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item   RoadmapItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@index([tenantId, itemId])
  @@map("roadmap_item_votes")
}

model RoadmapItemWatcher {
  id       String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid
  itemId   String @db.Uuid
  userId   String @db.Uuid
  
  // Notification preferences
  notifyOnStatusChange Boolean @default(true)
  notifyOnComments     Boolean @default(true)
  notifyOnProgress     Boolean @default(false)
  
  createdAt DateTime @default(now())

  tenant Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item   RoadmapItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@index([tenantId, itemId])
  @@map("roadmap_item_watchers")
}

enum RoadmapActivityType {
  item_created
  item_updated
  status_changed
  priority_changed
  target_date_changed
  progress_updated
  comment_added
  vote_added
  watcher_added
  attachment_added
  moved_to_release
  moved_to_category
}

model RoadmapItemActivity {
  id       String              @id @default(uuid()) @db.Uuid
  tenantId String              @db.Uuid
  itemId   String              @db.Uuid
  
  type     RoadmapActivityType
  title    String
  details  String?             @db.Text
  
  // Activity data (JSON for flexibility)
  oldValue Json?
  newValue Json?
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())

  tenant  Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item    RoadmapItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  creator User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([tenantId, itemId])
  @@index([tenantId, createdAt])
  @@map("roadmap_item_activities")
}

model RoadmapItemAttachment {
  id       String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid
  itemId   String @db.Uuid
  
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  url          String @db.Text
  
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())

  tenant   Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item     RoadmapItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  uploader User        @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, itemId])
  @@map("roadmap_item_attachments")
}

model RoadmapContributor {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  roadmapId  String @db.Uuid
  userId     String @db.Uuid
  
  role       String @default("contributor") // "owner", "admin", "contributor", "viewer"
  
  // Permissions
  canEdit    Boolean @default(false)
  canDelete  Boolean @default(false)
  canApprove Boolean @default(false)
  canInvite  Boolean @default(false)
  
  addedBy   String   @db.Uuid
  addedAt   DateTime @default(now())

  tenant   Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmap  ProductRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter  User           @relation("RoadmapInviter", fields: [addedBy], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId])
  @@index([tenantId, roadmapId])
  @@map("roadmap_contributors")
}

model RoadmapFollower {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  roadmapId String @db.Uuid
  userId    String @db.Uuid
  
  // Notification preferences
  notifyOnNewItem    Boolean @default(true)
  notifyOnRelease    Boolean @default(true)
  notifyOnMilestone  Boolean @default(false)
  emailNotifications Boolean @default(false)
  
  followedAt DateTime @default(now())

  tenant  Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmap ProductRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roadmapId])
  @@index([tenantId, roadmapId])
  @@map("roadmap_followers")
}

model RoadmapCustomField {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  roadmapId  String @db.Uuid
  
  name       String
  type       String // "text", "number", "date", "select", "multiselect", "boolean", "url"
  
  // Configuration
  isRequired Boolean @default(false)
  options    Json?   // For select/multiselect types
  
  // Display
  label       String?
  placeholder String?
  helpText    String?
  sortOrder   Int     @default(0)
  
  isActive Boolean @default(true)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  roadmap  ProductRoadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  creator  User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  values   RoadmapItemCustomValue[]

  @@unique([tenantId, roadmapId, name])
  @@index([tenantId, roadmapId])
  @@map("roadmap_custom_fields")
}

model RoadmapItemCustomValue {
  id      String @id @default(uuid()) @db.Uuid
  tenantId String @db.Uuid
  itemId  String @db.Uuid
  fieldId String @db.Uuid
  
  value   String @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  item   RoadmapItem        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  field  RoadmapCustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([itemId, fieldId])
  @@index([tenantId, itemId])
  @@map("roadmap_item_custom_values")
}

// -------------------- Campaign Management --------------------

enum CampaignStatus {
  draft
  scheduled
  active
  paused
  completed
  cancelled
  archived
}

enum CampaignType {
  email
  sms
  social_media
  push_notification
  direct_mail
  webinar
  event
  survey
  multi_channel
  drip_sequence
  transactional
}

enum CampaignObjective {
  awareness
  engagement
  lead_generation
  conversion
  retention
  re_engagement
  upsell
  cross_sell
  referral
  feedback
}

enum MessageStatus {
  draft
  scheduled
  sending
  sent
  delivered
  opened
  clicked
  bounced
  failed
  unsubscribed
  spam
}

enum AudienceType {
  all_contacts
  segment
  list
  custom_filter
  lookalike
  behavioral
  demographic
  geographic
}

model Campaign {
  id          String         @id @default(uuid()) @db.Uuid
  tenantId    String         @db.Uuid
  name        String
  description String?        @db.Text
  
  // Campaign Details
  type        CampaignType
  status      CampaignStatus @default(draft)
  objective   CampaignObjective
  
  // Scheduling
  startDate   DateTime?
  endDate     DateTime?
  timezone    String         @default("UTC")
  
  // Targeting
  audienceType AudienceType  @default(all_contacts)
  audienceConfig Json?       // Audience selection criteria
  targetCount  Int           @default(0)
  
  // Content
  subject     String?        // For email campaigns
  content     Json           // Campaign content structure
  template    Json?          // Template configuration
  
  // Settings
  priority    Int            @default(1)
  frequency   String?        // For recurring campaigns
  
  // Tracking & Analytics
  trackOpens     Boolean @default(true)
  trackClicks    Boolean @default(true)
  trackConversions Boolean @default(false)
  conversionGoal String? // URL or event to track
  
  // Budget & Costs
  budget         Decimal? @db.Decimal(10, 2)
  costPerSend    Decimal? @db.Decimal(6, 4)
  actualCost     Decimal  @default(0) @db.Decimal(10, 2)
  
  // Performance Metrics (cached)
  sentCount      Int @default(0)
  deliveredCount Int @default(0)
  openedCount    Int @default(0)
  clickedCount   Int @default(0)
  bouncedCount   Int @default(0)
  unsubscribedCount Int @default(0)
  conversionCount Int @default(0)
  
  // Rates (calculated)
  deliveryRate   Decimal @default(0) @db.Decimal(5, 2)
  openRate       Decimal @default(0) @db.Decimal(5, 2)
  clickRate      Decimal @default(0) @db.Decimal(5, 2)
  bounceRate     Decimal @default(0) @db.Decimal(5, 2)
  unsubscribeRate Decimal @default(0) @db.Decimal(5, 2)
  conversionRate Decimal @default(0) @db.Decimal(5, 2)
  roi            Decimal @default(0) @db.Decimal(8, 2)
  
  // A/B Testing
  isAbTest       Boolean @default(false)
  parentCampaignId String? @db.Uuid
  testPercentage Int?    // Percentage of audience for test
  winnerCriteria String? // "open_rate", "click_rate", "conversion_rate"
  winnerSelected Boolean @default(false)
  
  // Metadata
  createdBy   String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sentAt      DateTime?
  completedAt DateTime?

  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator       User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parentCampaign Campaign?      @relation("CampaignABTest", fields: [parentCampaignId], references: [id], onDelete: Cascade)
  childCampaigns Campaign[]     @relation("CampaignABTest")
  
  messages      CampaignMessage[]
  audiences     CampaignAudience[]
  analytics     CampaignAnalytics[]
  events        CampaignEvent[]
  assets        CampaignAsset[]
  automations   CampaignAutomation[]
  tags          CampaignTag[]
  
  @@unique([tenantId, name])
  @@index([tenantId, status])
  @@index([tenantId, type])
  @@index([tenantId, startDate])
  @@index([tenantId, createdAt])
  @@map("campaigns")
}

model CampaignMessage {
  id         String        @id @default(uuid()) @db.Uuid
  tenantId   String        @db.Uuid
  campaignId String        @db.Uuid
  contactId  String        @db.Uuid
  
  // Message Details
  status     MessageStatus @default(draft)
  content    Json          // Personalized message content
  metadata   Json?         // Provider-specific metadata
  
  // Delivery Details
  channel      String      // email, sms, push, etc.
  providerName String?     // SendGrid, Twilio, etc.
  providerId   String?     // Provider's message ID
  
  // Tracking
  sentAt       DateTime?
  deliveredAt  DateTime?
  openedAt     DateTime?
  firstClickAt DateTime?
  bouncedAt    DateTime?
  unsubscribedAt DateTime?
  
  // Error Handling
  errorCode    String?
  errorMessage String?     @db.Text
  retryCount   Int         @default(0)
  
  // Analytics Data
  opens        Int @default(0)
  clicks       Int @default(0)
  clickedUrls  Json? // Array of clicked URLs with timestamps
  userAgent    String?
  ipAddress    String?
  location     Json? // Geo location data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@index([tenantId, campaignId, status])
  @@index([tenantId, contactId])
  @@index([tenantId, sentAt])
  @@map("campaign_messages")
}

model CampaignAudience {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  campaignId String @db.Uuid
  
  name        String
  description String? @db.Text
  audienceType AudienceType
  
  // Audience Definition
  criteria    Json // Filter criteria for dynamic audiences
  contactIds  Json? // Static list of contact IDs
  
  // Statistics
  totalCount    Int @default(0)
  activeCount   Int @default(0) // Subscribed/reachable contacts
  
  // Settings
  isActive    Boolean @default(true)
  lastUpdated DateTime @default(now())
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([tenantId, campaignId, name])
  @@index([tenantId, campaignId])
  @@map("campaign_audiences")
}

model CampaignAnalytics {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  campaignId String @db.Uuid
  
  // Time Period
  reportDate DateTime
  hour       Int?     // For hourly analytics
  
  // Core Metrics
  sent       Int @default(0)
  delivered  Int @default(0)
  opened     Int @default(0)
  clicked    Int @default(0)
  bounced    Int @default(0)
  unsubscribed Int @default(0)
  spam       Int @default(0)
  
  // Revenue Metrics
  conversions    Int     @default(0)
  revenue        Decimal @default(0) @db.Decimal(10, 2)
  cost           Decimal @default(0) @db.Decimal(10, 2)
  
  // Engagement Metrics
  uniqueOpens    Int @default(0)
  uniqueClicks   Int @default(0)
  forwardCount   Int @default(0)
  shareCount     Int @default(0)
  
  // Device/Platform Breakdown
  deviceData     Json? // Mobile, desktop, tablet stats
  locationData   Json? // Geographic performance data
  
  createdAt DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, reportDate, hour])
  @@index([tenantId, campaignId, reportDate])
  @@map("campaign_analytics")
}

model CampaignEvent {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  campaignId String @db.Uuid
  contactId  String? @db.Uuid
  
  eventType  String // sent, delivered, opened, clicked, bounced, unsubscribed, etc.
  eventData  Json?  // Additional event-specific data
  
  // Context
  userAgent  String?
  ipAddress  String?
  location   Json?
  referrer   String?
  
  // Timing
  timestamp  DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([tenantId, campaignId, eventType])
  @@index([tenantId, contactId])
  @@index([tenantId, timestamp])
  @@map("campaign_events")
}

model CampaignAsset {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  campaignId String @db.Uuid
  
  name       String
  type       String // image, document, video, audio, template
  url        String @db.Text
  filename   String
  fileSize   Int
  mimeType   String
  
  // Asset Properties
  width      Int?
  height     Int?
  duration   Int? // For video/audio in seconds
  
  // Usage Tracking
  isUsed     Boolean @default(false)
  clickCount Int     @default(0)
  
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign  Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  uploader  User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, campaignId])
  @@index([tenantId, type])
  @@map("campaign_assets")
}

model CampaignAutomation {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  campaignId String @db.Uuid
  
  name         String
  description  String? @db.Text
  triggerType  String  // time_based, behavior_based, event_based
  triggerConfig Json   // Trigger configuration
  
  // Actions
  actions      Json    // Array of actions to perform
  
  // Conditions
  conditions   Json?   // Optional conditions for execution
  
  // Status
  isActive     Boolean @default(true)
  lastRun      DateTime?
  nextRun      DateTime?
  
  // Statistics
  triggerCount   Int @default(0)
  executionCount Int @default(0)
  errorCount     Int @default(0)
  lastError      String? @db.Text
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([tenantId, campaignId, name])
  @@index([tenantId, campaignId])
  @@index([tenantId, isActive, nextRun])
  @@map("campaign_automations")
}

model CampaignTag {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  campaignId String @db.Uuid
  
  name       String
  color      String? @db.VarChar(7)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([campaignId, name])
  @@index([tenantId, campaignId])
  @@map("campaign_tags")
}

// -------------------- Feedback System --------------------

enum FeedbackType {
  suggestion
  bug_report
  feature_request
  complaint
  compliment
  general
  support
  question
}

enum FeedbackStatus {
  submitted
  acknowledged
  in_review
  planned
  in_progress
  implemented
  rejected
  on_hold
  duplicate
  archived
}

enum FeedbackPriority {
  low
  medium
  high
  critical
  urgent
}

enum FeedbackSource {
  web_form
  email
  phone
  chat
  survey
  social_media
  app
  api
  import
}

enum FeedbackSentiment {
  very_negative
  negative
  neutral
  positive
  very_positive
}

model Feedback {
  id          String           @id @default(uuid()) @db.Uuid
  tenantId    String           @db.Uuid
  title       String
  description String           @db.Text
  
  // Classification
  type        FeedbackType     @default(general)
  status      FeedbackStatus   @default(submitted)
  priority    FeedbackPriority @default(medium)
  source      FeedbackSource   @default(web_form)
  
  // Sentiment Analysis
  sentiment   FeedbackSentiment? 
  sentimentScore Decimal?       @db.Decimal(3, 2) // -1.00 to 1.00
  sentimentConfidence Decimal?  @db.Decimal(3, 2) // 0.00 to 1.00
  
  // Contact Information
  contactName    String?
  contactEmail   String?
  contactPhone   String?
  contactCompany String?
  userId         String?        @db.Uuid // If authenticated user
  
  // Categorization
  categoryId     String?        @db.Uuid
  subcategoryId  String?        @db.Uuid
  tags           String[]       @db.Text
  
  // Product/Feature Context
  productArea    String?        // Which part of the product
  featureContext String?        // Specific feature
  pageUrl        String?        @db.Text
  userAgent      String?        @db.Text
  browserInfo    Json?          // Browser/device information
  
  // Urgency & Impact
  urgency        String?        // low, medium, high, critical
  businessImpact String?        // low, medium, high
  customerImpact String?        // Estimated number of affected customers
  
  // Internal Processing
  assignedTo     String?        @db.Uuid
  assignedAt     DateTime?
  estimatedEffort String?       // hours, days, weeks
  actualEffort   String?
  
  // Resolution
  resolution     String?        @db.Text
  resolutionType String?        // implemented, rejected, duplicate, etc.
  resolvedAt     DateTime?
  resolvedBy     String?        @db.Uuid
  
  // External References
  issueNumber    String?        // Internal issue tracking number
  externalId     String?        // External system ID (Jira, GitHub, etc.)
  externalUrl    String?        @db.Text
  
  // Voting & Engagement
  upvotes        Int            @default(0)
  downvotes      Int            @default(0)
  viewCount      Int            @default(0)
  followerCount  Int            @default(0)
  
  // Settings
  isPublic       Boolean        @default(false)
  allowVoting    Boolean        @default(true)
  allowComments  Boolean        @default(true)
  isArchived     Boolean        @default(false)
  
  // Auto-generated
  slug           String
  referenceNumber String        @unique // Human-friendly reference like FB-2024-001
  
  // Metadata
  submittedBy    String?        @db.Uuid
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  lastActivity   DateTime       @default(now())

  tenant       Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user         User?              @relation("FeedbackUser", fields: [userId], references: [id], onDelete: SetNull)
  submitter    User?              @relation("FeedbackSubmitter", fields: [submittedBy], references: [id], onDelete: SetNull)
  assignee     User?              @relation("FeedbackAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  resolver     User?              @relation("FeedbackResolver", fields: [resolvedBy], references: [id], onDelete: SetNull)
  category     FeedbackCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory  FeedbackSubcategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  
  comments     FeedbackComment[]
  votes        FeedbackVote[]
  attachments  FeedbackAttachment[]
  activities   FeedbackActivity[]
  followers    FeedbackFollower[]
  linkedItems  FeedbackLink[]     @relation("LinkedFeedback")
  linkSources  FeedbackLink[]     @relation("SourceFeedback")
  customValues FeedbackCustomValue[]

  @@unique([tenantId, slug])
  @@index([tenantId, status])
  @@index([tenantId, type])
  @@index([tenantId, priority])
  @@index([tenantId, source])
  @@index([tenantId, categoryId])
  @@index([tenantId, assignedTo])
  @@index([tenantId, userId])
  @@index([tenantId, createdAt])
  @@index([contactEmail])
  @@index([isPublic, status])
  @@map("feedback")
}

model FeedbackCategory {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  name        String
  description String? @db.Text
  
  // Visual
  color       String? @db.VarChar(7)
  icon        String?
  
  // Settings
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  // Auto-assignment rules
  autoAssignTo String? @db.Uuid
  defaultPriority FeedbackPriority @default(medium)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant       Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator      User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  autoAssignee User?               @relation("CategoryAutoAssignee", fields: [autoAssignTo], references: [id], onDelete: SetNull)
  feedback     Feedback[]
  subcategories FeedbackSubcategory[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("feedback_categories")
}

model FeedbackSubcategory {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  categoryId  String  @db.Uuid
  name        String
  description String? @db.Text
  
  // Settings
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  category FeedbackCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator  User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  feedback Feedback[]

  @@unique([tenantId, categoryId, name])
  @@index([tenantId, categoryId])
  @@map("feedback_subcategories")
}

model FeedbackComment {
  id         String  @id @default(uuid()) @db.Uuid
  tenantId   String  @db.Uuid
  feedbackId String  @db.Uuid
  parentId   String? @db.Uuid
  
  content    String  @db.Text
  isPrivate  Boolean @default(false) // Internal team comments
  isResolution Boolean @default(false) // Is this a resolution comment?
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feedback Feedback        @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  creator  User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent   FeedbackComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  FeedbackComment[] @relation("CommentReplies")

  @@index([tenantId, feedbackId])
  @@index([tenantId, createdAt])
  @@map("feedback_comments")
}

model FeedbackVote {
  id         String  @id @default(uuid()) @db.Uuid
  tenantId   String  @db.Uuid
  feedbackId String  @db.Uuid
  userId     String  @db.Uuid
  
  isUpvote   Boolean // true for upvote, false for downvote
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feedbackId])
  @@index([tenantId, feedbackId])
  @@map("feedback_votes")
}

model FeedbackAttachment {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  feedbackId String @db.Uuid
  
  filename     String
  originalName String
  fileSize     Int
  mimeType     String
  url          String @db.Text
  
  // File metadata
  width        Int?
  height       Int?
  duration     Int? // For video/audio
  
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  uploader User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, feedbackId])
  @@map("feedback_attachments")
}

enum FeedbackActivityType {
  created
  status_changed
  priority_changed
  assigned
  unassigned
  commented
  voted
  linked
  unlinked
  category_changed
  resolution_added
  tagged
  followed
  unfollowed
  duplicated
  archived
  restored
}

model FeedbackActivity {
  id         String               @id @default(uuid()) @db.Uuid
  tenantId   String               @db.Uuid
  feedbackId String               @db.Uuid
  
  type       FeedbackActivityType
  title      String
  description String?             @db.Text
  
  // Activity data
  oldValue   Json?
  newValue   Json?
  metadata   Json?
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([tenantId, feedbackId])
  @@index([tenantId, type])
  @@index([tenantId, createdAt])
  @@map("feedback_activities")
}

model FeedbackFollower {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  feedbackId String @db.Uuid
  userId     String @db.Uuid
  
  // Notification preferences
  notifyOnStatusChange Boolean @default(true)
  notifyOnComments     Boolean @default(true)
  notifyOnAssignment   Boolean @default(false)
  notifyOnResolution   Boolean @default(true)
  emailNotifications   Boolean @default(true)
  
  followedAt DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feedback Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, feedbackId])
  @@index([tenantId, feedbackId])
  @@map("feedback_followers")
}

model FeedbackLink {
  id               String @id @default(uuid()) @db.Uuid
  tenantId         String @db.Uuid
  sourceFeedbackId String @db.Uuid
  linkedFeedbackId String @db.Uuid
  
  linkType         String // duplicate, related, blocks, blocked_by, parent, child
  description      String? @db.Text
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())

  tenant         Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sourceFeedback Feedback @relation("SourceFeedback", fields: [sourceFeedbackId], references: [id], onDelete: Cascade)
  linkedFeedback Feedback @relation("LinkedFeedback", fields: [linkedFeedbackId], references: [id], onDelete: Cascade)
  creator        User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([sourceFeedbackId, linkedFeedbackId, linkType])
  @@index([tenantId, sourceFeedbackId])
  @@index([tenantId, linkedFeedbackId])
  @@map("feedback_links")
}

model FeedbackCustomField {
  id        String @id @default(uuid()) @db.Uuid
  tenantId  String @db.Uuid
  
  name      String
  type      String // text, number, date, select, multiselect, boolean, url
  
  // Configuration
  isRequired Boolean @default(false)
  options    Json?   // For select/multiselect types
  
  // Display
  label       String?
  placeholder String?
  helpText    String?
  sortOrder   Int     @default(0)
  
  // Visibility
  isActive    Boolean @default(true)
  showInList  Boolean @default(false)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  values  FeedbackCustomValue[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("feedback_custom_fields")
}

model FeedbackCustomValue {
  id         String @id @default(uuid()) @db.Uuid
  tenantId   String @db.Uuid
  feedbackId String @db.Uuid
  fieldId    String @db.Uuid
  
  value      String @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  feedback Feedback            @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
  field    FeedbackCustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([feedbackId, fieldId])
  @@index([tenantId, feedbackId])
  @@map("feedback_custom_values")
}

// -------------------- People Management --------------------

enum EmploymentStatus {
  active
  inactive
  terminated
  on_leave
  contractor
  intern
  part_time
  full_time
  consultant
}

enum EmploymentType {
  permanent
  contract
  internship
  freelance
  consultant
  temporary
  seasonal
  part_time
  full_time
}

enum LeaveType {
  vacation
  sick
  personal
  maternity
  paternity
  bereavement
  jury_duty
  military
  sabbatical
  unpaid
}

enum LeaveStatus {
  pending
  approved
  rejected
  cancelled
  in_progress
  completed
}

model Employee {
  id          String           @id @default(uuid()) @db.Uuid
  tenantId    String           @db.Uuid
  userId      String?          @db.Uuid // Link to User account if exists
  
  // Personal Information
  firstName   String
  lastName    String
  middleName  String?
  displayName String
  email       String
  phone       String?
  alternateEmail String?
  
  // Employment Details
  employeeNumber String         @unique
  status      EmploymentStatus @default(active)
  type        EmploymentType   @default(full_time)
  
  // Job Information
  jobTitle    String
  departmentId String?         @db.Uuid
  managerId   String?         @db.Uuid // Reports to
  locationId  String?         @db.Uuid
  
  // Dates
  hireDate    DateTime
  startDate   DateTime?       // Different from hire for rehires
  endDate     DateTime?       // Termination/resignation date
  
  // Compensation
  salary      Decimal?        @db.Decimal(10, 2)
  hourlyRate  Decimal?        @db.Decimal(8, 2)
  currency    String          @default("USD")
  payGrade    String?
  payFrequency String?        // weekly, biweekly, monthly, etc.
  
  // Contact & Emergency
  address     Json?           // Home address
  emergencyContact Json?      // Emergency contact info
  
  // Documents & Compliance
  taxId       String?         // SSN or equivalent
  workEligibility Boolean     @default(true)
  backgroundCheck Boolean     @default(false)
  
  // Benefits
  healthInsurance Boolean     @default(false)
  dentalInsurance Boolean     @default(false)
  visionInsurance Boolean     @default(false)
  retirementPlan  Boolean     @default(false)
  ptoBalance      Decimal     @default(0) @db.Decimal(5, 2) // PTO hours
  sickBalance     Decimal     @default(0) @db.Decimal(5, 2) // Sick hours
  
  // Performance & Development
  lastReviewDate  DateTime?
  nextReviewDate  DateTime?
  performanceRating String?
  goals           Json?       // Performance goals
  skills          String[]    @db.Text
  certifications  Json?       // Professional certifications
  
  // Settings
  isActive    Boolean         @default(true)
  notes       String?         @db.Text
  
  // Metadata
  createdBy   String          @db.Uuid
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  tenant      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  creator     User            @relation("EmployeeCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  department  Department?     @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  manager     Employee?       @relation("ManagerReports", fields: [managerId], references: [id], onDelete: SetNull)
  directReports Employee[]    @relation("ManagerReports")
  location    Location?       @relation(fields: [locationId], references: [id], onDelete: SetNull)
  
  leaveRequests   LeaveRequest[]
  timeEntries     TimeEntry[]
  performanceReviews PerformanceReview[]
  employeeBenefits EmployeeBenefit[]
  employeeDocuments EmployeeDocument[]
  employeeSkills  EmployeeSkill[]
  compensationHistory CompensationHistory[]

  @@unique([tenantId, employeeNumber])
  @@unique([tenantId, email])
  @@index([tenantId, status])
  @@index([tenantId, departmentId])
  @@index([tenantId, managerId])
  @@index([tenantId, hireDate])
  @@map("employees")
}

model Department {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  name        String
  description String? @db.Text
  
  // Hierarchy
  parentId    String? @db.Uuid
  
  // Leadership
  headId      String? @db.Uuid // Department head
  
  // Budget & Metrics
  budget      Decimal? @db.Decimal(12, 2)
  budgetYear  Int?
  headcount   Int      @default(0)
  
  // Settings
  isActive    Boolean  @default(true)
  costCenter  String?
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator   User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent    Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children  Department[] @relation("DepartmentHierarchy")
  head      Employee?   @relation("DepartmentHead", fields: [headId], references: [id], onDelete: SetNull)
  employees Employee[]

  @@unique([tenantId, name])
  @@index([tenantId, parentId])
  @@index([tenantId, isActive])
  @@map("departments")
}

model Location {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  name        String
  description String? @db.Text
  
  // Address
  address     String
  city        String
  state       String?
  postalCode  String?
  country     String  @default("US")
  
  // Contact
  phone       String?
  email       String?
  
  // Details
  timezone    String  @default("UTC")
  capacity    Int?    // Maximum occupancy
  
  // Settings
  isActive    Boolean @default(true)
  isHeadquarters Boolean @default(false)
  
  createdBy String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  creator   User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  employees Employee[]

  @@unique([tenantId, name])
  @@index([tenantId, isActive])
  @@map("locations")
}

model LeaveRequest {
  id          String      @id @default(uuid()) @db.Uuid
  tenantId    String      @db.Uuid
  employeeId  String      @db.Uuid
  
  type        LeaveType
  status      LeaveStatus @default(pending)
  
  // Dates
  startDate   DateTime
  endDate     DateTime
  returnDate  DateTime?   // Actual return date
  
  // Details
  totalDays   Decimal     @db.Decimal(5, 2)
  reason      String?     @db.Text
  notes       String?     @db.Text
  
  // Approval
  approvedBy  String?     @db.Uuid
  approvedAt  DateTime?
  rejectedReason String?  @db.Text
  
  // Coverage
  coveringEmployeeId String? @db.Uuid
  handoverNotes     String? @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee  Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver  User?     @relation(fields: [approvedBy], references: [id], onDelete: SetNull)
  coveringEmployee Employee? @relation("CoveringEmployee", fields: [coveringEmployeeId], references: [id], onDelete: SetNull)

  @@index([tenantId, employeeId])
  @@index([tenantId, status])
  @@index([tenantId, startDate])
  @@map("leave_requests")
}

model TimeEntry {
  id          String    @id @default(uuid()) @db.Uuid
  tenantId    String    @db.Uuid
  employeeId  String    @db.Uuid
  
  // Time tracking
  date        DateTime  @db.Date
  clockIn     DateTime?
  clockOut    DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?
  
  // Hours
  regularHours    Decimal @default(0) @db.Decimal(5, 2)
  overtimeHours   Decimal @default(0) @db.Decimal(5, 2)
  totalHours      Decimal @default(0) @db.Decimal(5, 2)
  
  // Project/Task allocation
  projectId   String?   @db.Uuid
  taskId      String?   @db.Uuid
  description String?   @db.Text
  
  // Status
  status      String    @default("draft") // draft, submitted, approved, rejected
  approvedBy  String?   @db.Uuid
  approvedAt  DateTime?
  
  // Location tracking
  location    String?
  ipAddress   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver User?     @relation(fields: [approvedBy], references: [id], onDelete: SetNull)

  @@unique([tenantId, employeeId, date])
  @@index([tenantId, employeeId])
  @@index([tenantId, date])
  @@index([tenantId, status])
  @@map("time_entries")
}

model PerformanceReview {
  id          String    @id @default(uuid()) @db.Uuid
  tenantId    String    @db.Uuid
  employeeId  String    @db.Uuid
  reviewerId  String    @db.Uuid
  
  // Review period
  periodStart DateTime  @db.Date
  periodEnd   DateTime  @db.Date
  
  // Review details
  type        String    @default("annual") // annual, mid-year, quarterly, probationary
  status      String    @default("draft") // draft, in_progress, completed, acknowledged
  
  // Ratings
  overallRating   Decimal? @db.Decimal(3, 2) // 1.00 to 5.00
  goalAchievement Decimal? @db.Decimal(3, 2)
  competencyRating Decimal? @db.Decimal(3, 2)
  
  // Content
  strengths       String? @db.Text
  improvements    String? @db.Text
  accomplishments String? @db.Text
  goals          Json?   // Goals for next period
  development    Json?   // Development plan
  
  // Comments
  managerComments  String? @db.Text
  employeeComments String? @db.Text
  hrComments      String? @db.Text
  
  // Workflow
  employeeAcknowledged Boolean @default(false)
  acknowledgedAt      DateTime?
  
  // Next review
  nextReviewDate DateTime?
  
  dueDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  reviewer User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([tenantId, employeeId])
  @@index([tenantId, reviewerId])
  @@index([tenantId, periodEnd])
  @@index([tenantId, status])
  @@map("performance_reviews")
}

model EmployeeBenefit {
  id          String    @id @default(uuid()) @db.Uuid
  tenantId    String    @db.Uuid
  employeeId  String    @db.Uuid
  
  benefitType String    // health, dental, vision, retirement, life_insurance, etc.
  planName    String
  provider    String?
  
  // Coverage
  coverage    String    @default("employee") // employee, spouse, family
  
  // Financial
  employeeContribution Decimal? @db.Decimal(8, 2)
  employerContribution Decimal? @db.Decimal(8, 2)
  totalCost   Decimal? @db.Decimal(8, 2)
  
  // Dates
  effectiveDate DateTime @db.Date
  endDate      DateTime? @db.Date
  
  // Status
  isActive     Boolean @default(true)
  
  // Metadata
  enrolledBy   String?  @db.Uuid
  enrolledAt   DateTime @default(now())
  notes        String?  @db.Text

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  enroller User?    @relation(fields: [enrolledBy], references: [id], onDelete: SetNull)

  @@index([tenantId, employeeId])
  @@index([tenantId, benefitType])
  @@index([tenantId, effectiveDate])
  @@map("employee_benefits")
}

model EmployeeDocument {
  id          String @id @default(uuid()) @db.Uuid
  tenantId    String @db.Uuid
  employeeId  String @db.Uuid
  
  // Document details
  name        String
  type        String // contract, handbook, tax_form, performance_review, etc.
  description String? @db.Text
  
  // File info
  filename    String
  fileSize    Int
  mimeType    String
  url         String @db.Text
  
  // Classification
  isConfidential Boolean @default(false)
  isRequired    Boolean @default(false)
  category      String?
  
  // Signatures/Acknowledgment
  requiresSignature Boolean @default(false)
  signedAt         DateTime?
  acknowledgedAt   DateTime?
  
  // Expiration
  expiresAt   DateTime?
  
  // Access control
  accessLevel String @default("employee") // employee, manager, hr, admin
  
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  uploader User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, employeeId])
  @@index([tenantId, type])
  @@index([tenantId, expiresAt])
  @@map("employee_documents")
}

model EmployeeSkill {
  id          String  @id @default(uuid()) @db.Uuid
  tenantId    String  @db.Uuid
  employeeId  String  @db.Uuid
  
  skillName   String
  category    String? // technical, soft_skill, language, certification, etc.
  level       String  @default("beginner") // beginner, intermediate, advanced, expert
  
  // Evidence/Validation
  yearsOfExperience Decimal? @db.Decimal(4, 1)
  certificationName String?
  certificationDate DateTime?
  expirationDate    DateTime?
  
  // Assessment
  selfRating     Int?    // 1-5 scale
  managerRating  Int?    // 1-5 scale
  lastAssessed   DateTime?
  
  // Development
  isTargetSkill  Boolean @default(false) // Skill being developed
  targetLevel    String?
  developmentPlan String? @db.Text
  
  // Visibility
  isPublic       Boolean @default(true) // Show in employee directory
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([tenantId, employeeId, skillName])
  @@index([tenantId, skillName])
  @@index([tenantId, category])
  @@map("employee_skills")
}

model CompensationHistory {
  id          String    @id @default(uuid()) @db.Uuid
  tenantId    String    @db.Uuid
  employeeId  String    @db.Uuid
  
  // Change details
  changeType  String    // promotion, raise, adjustment, bonus, etc.
  reason      String?   @db.Text
  
  // Before/After values
  previousSalary   Decimal? @db.Decimal(10, 2)
  newSalary        Decimal? @db.Decimal(10, 2)
  previousJobTitle String?
  newJobTitle      String?
  
  // Bonus/One-time payments
  bonusAmount     Decimal? @db.Decimal(10, 2)
  bonusType       String?  // performance, retention, signing, etc.
  
  // Equity
  equityShares    Int?
  equityValue     Decimal? @db.Decimal(12, 2)
  vestingSchedule Json?
  
  // Effective date
  effectiveDate   DateTime @db.Date
  
  // Approval
  approvedBy      String   @db.Uuid
  approvedAt      DateTime @default(now())
  
  // Notes
  notes           String?  @db.Text
  
  createdAt DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  approver User     @relation(fields: [approvedBy], references: [id], onDelete: Cascade)

  @@index([tenantId, employeeId])
  @@index([tenantId, effectiveDate])
  @@index([tenantId, changeType])
  @@map("compensation_history")
}
